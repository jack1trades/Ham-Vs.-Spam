# -*- coding: utf-8 -*-
"""Ham&Spam.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/10BRd6jewW3iCLPV6vq-qOV7NIDtrEF8J

**SPAM VS HAM MAIL PREDICTION**

**Spam mails form an accountable part of our cyberlives.**

**Perhaps, a system to categorize the mails as they reach the inbox - is a simple step that goes a long way.**

**In Machine Learning, a number of base and ensemble algorithms are used for effective classifiation.**

**I have explored most of those classification algorithms here.**

**----------------------------------------------------------------------------**

##### **Import Libraries**
"""

import pandas as pd
import numpy as np

from sklearn.preprocessing import LabelEncoder
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression

"""##### **Dataset**"""

maildf = pd.read_csv("mail_data.csv")
maildf.head()

maildf["Message"][2]

"""##### **Label Encoding**"""

le = LabelEncoder()
target = maildf["Category"]
maildf["Category"] = le.fit_transform(maildf["Category"])

maildf["Category"]

"""##### **The Split**"""

X = maildf.drop(columns=['Category'])
y = maildf["Category"]

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3)

X_train.shape, X_test.shape, y_train.shape, y_test.shape

"""##### **Imbalance upsampling**"""

from collections import Counter
Counter(y_train)

import matplotlib.pyplot as plt
plt.figure(figsize=(10,7))
plt.hist(y_train)

train = pd.concat([X_train["Message"], y_train], axis=1)

train

# Upsampling

train_minority = train[train["Category"]==1]

from sklearn.utils import resample
minority_upsampled = resample(train_minority, replace=True, n_samples=2860)           # 3380-520 = 2860
# minority_upsampled = resample(y_train_minority, replace=True, n_samples=500)

train_upsampled = pd.concat([train, minority_upsampled])

Counter(train_upsampled["Category"])

train_upsampled

train_upsampled.shape

plt.hist(train_upsampled["Category"])

"""Redefining the train datasets --> X_train, y_train"""

X_train = train_upsampled.drop(columns=["Category"])
y_train = train_upsampled["Category"]

Counter(y_test)

"""##### **Feature Extraction**"""

from sklearn.feature_extraction.text import TfidfVectorizer

feature_extraction = TfidfVectorizer(min_df =1, stop_words = 'english', lowercase='True')
# feature_extraction = TfidfVectorizer()

X_train_features = feature_extraction.fit_transform(X_train['Message'])
X_test_features = feature_extraction.transform(X_test['Message'])

y_train = y_train.astype('int')
y_test  = y_test.astype('int')

print(X_train_features)

X_train_features

feature_extraction.get_feature_names()

X_train["Message"]

"""##### **LogisticRegressionClassifier**"""

from sklearn.linear_model import LogisticRegression

lor = LogisticRegression()

lor.fit(X_train_features, y_train)

"""Valuation"""

y_pred = lor.predict(X_test_features)

"""Performance Metrics"""

from sklearn.metrics import accuracy_score, confusion_matrix, classification_report

print("1. Accuracy Score - ", accuracy_score(y_pred, y_test))
print("2. Confusion Matrix - ", confusion_matrix(y_pred, y_test))
print("3. Classification_report - ", classification_report(y_pred, y_test))

lor.score(X_test_features, y_test)

accuracy_score(y_pred, y_test)

"""##### **KNearestNeighbors**"""

from sklearn.neighbors import KNeighborsClassifier

knn = KNeighborsClassifier()

knn.fit(X_train_features, y_train)

"""Valuation"""

y_pred = knn.predict(X_test_features)

"""Classification metrics"""

from sklearn.metrics import accuracy_score, confusion_matrix, classification_report

print("1. Accuracy Score - ", accuracy_score(y_pred, y_test))
print("2. Confusion Matrix - ", confusion_matrix(y_pred, y_test))
print("3. Classification_report - ", classification_report(y_pred, y_test))

knn.score(X_test_features, y_test)



"""##### **DecisionTreeClassifier**"""

from sklearn.tree import DecisionTreeClassifier

dtree = DecisionTreeClassifier(criterion="entropy", max_depth=10)

dtree.fit(X_train_features, y_train)

"""Valuation"""

y_predt = dtree.predict(X_test_features)

y_predt

"""Prediction Metrics"""

from sklearn.metrics import accuracy_score, confusion_matrix, classification_report

print("1. Accuracy Score - ", accuracy_score(y_predt, y_test))
print("\n")
print("2. Confusion Matrix - \n", confusion_matrix(y_predt, y_test))
print("\n")
print("3. Classification_report - \n\n", classification_report(y_predt, y_test))

dtree.score(X_test_features, y_test)



"""##### **RandomForestClassifier**"""

from sklearn.ensemble import RandomForestClassifier

rfc = RandomForestClassifier()

rfc.fit(X_train_features, y_train)

"""Valuation"""

y_pred = rfc.predict(X_test_features)

"""Classification Metrics"""

from sklearn.metrics import accuracy_score, confusion_matrix, classification_report

print("1. Accuracy Score - ", accuracy_score(y_pred, y_test))
print("2. Confusion Matrix - ", confusion_matrix(y_pred, y_test))
print("3. Classification_report - ", classification_report(y_pred, y_test))

rfc.score(X_test_features, y_test)



"""##### **GradientBoostingClassifier**"""

from sklearn.ensemble import GradientBoostingClassifier

gradboostclass = GradientBoostingClassifier()

gradboostclass.fit(X_train_features, y_train)

"""Valuation"""

y_predg = gradboostclass.predict(X_test_features)

y_predg

"""Performance Metrics"""

from sklearn.metrics import accuracy_score, confusion_matrix, classification_report

print("1. Accuracy Score - ", accuracy_score(y_predg, y_test))
print("\n")
print("2. Confusion Matrix - \n", confusion_matrix(y_predg, y_test))
print("\n")
print("3. Classification_report - \n\n", classification_report(y_predg, y_test))

gradboostclass.score(X_test_features, y_test)



"""##### **AdaBoostClassifier**"""

from sklearn.ensemble import AdaBoostClassifier

adaboostclass = AdaBoostClassifier(
    learning_rate=1
)

adaboostclass.fit(X_train_features, y_train)

"""Valuation"""

y_preda = adaboostclass.predict(X_test_features)

y_preda

"""Performance Matrix"""

from sklearn.metrics import accuracy_score, confusion_matrix, classification_report

print("1. Accuracy Score - ", accuracy_score(y_preda, y_test))
print("\n")
print("2. Confusion Matrix - \n", confusion_matrix(y_preda, y_test))
print("\n")
print("3. Classification_report - \n\n", classification_report(y_preda, y_test))



"""##### **XGBClassifier**"""

import xgboost
from xgboost import XGBClassifier

xgb = XGBClassifier()

xgb.fit(X_train_features, y_train)

"""Valuation"""

y_pred = xgb.predict(X_test_features)

"""Classification metrics"""

from sklearn.metrics import accuracy_score, confusion_matrix, classification_report

print("1. Accuracy Score - ", accuracy_score(y_pred, y_test))
print("2. Confusion Matrix - ", confusion_matrix(y_pred, y_test))
print("3. Classification_report - ", classification_report(y_pred, y_test))

xgb.score(X_test_features, y_test)



"""##### **Inference**

**AdaBoostClassifier prevails and predicts the given text precisely with maximum accuracy**
"""



"""##### **Deployment**"""

# Pckle dump

import pickle

pickle.dump(adaboostclass, open("adaboostlass.pkl", "wb"))

# Pydantic

!pip install pydantic
from pydantic import BaseModel

class incoming_mail(BaseModel):
  Message : str

  class Config:
    schema_extra = {
        "example" : {
            "Message"  : "Free entry in 2 a wkly comp to win FA Cup final tkts 21st May 2005. Text FA to 87121 to receive entry question(std txt rate)T&C's apply 08452810075over18's ",
                    }
    }

# FastAPI

!pip install fastapi
from fastapi import FastAPI

app = FastAPI()

@app.on_event("startup")
def load_model():                                   # path.operation.functiuno
  global model
  model = pickle.load(open("adaboostclass.pkl", "rb"))

@app.get("/")
def index():
  return {"message" : "Homepage of API"}

@app.post("predict")
def get_incoming_mail(data: incoming_mail):
  received = data.dict()
  Message  =  received["Message"]

  pred_name = model.predict([Message]).tolist()[0]
  return {"prediction" : pred_name}

# ColabCode

!pip install colabcode

from colabcode import ColabCode

server = ColabCode(port = 15000, code=False)

server.run_app(app = app)



"""##### **END OF THE LINE**"""